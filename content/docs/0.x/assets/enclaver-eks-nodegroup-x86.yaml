AWSTemplateFormatVersion: "2010-09-09"
Description: Add a new Nitro Enclave Node Group to an existing EKS cluster
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "EKS Cluster Info"
        Parameters: 
          - ClusterName
      - Label: 
          default: "Node Group"
        Parameters: 
          - SubnetId
    ParameterLabels: 
      ClusterName: 
        default: "Name of Existing EKS Cluster"
      SubnetId: 
        default: "Pick a subnet"
      KeyName: 
        default: "SSH key"
Parameters:
  ClusterName:
    Type: String
    Description: Name of your existing EKS cluster
    AllowedPattern: ".+"
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet within the VPC to place the machines
    AllowedPattern: ".+"
  KeyName:
    Description: SSH Keypair to login to the instances
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern: ".+"
Resources:
  DemoLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: EnclaverEKSLaunchTemplate
      LaunchTemplateData:
        MetadataOptions:
          HttpPutResponseHopLimit: 2 # Increase from 1 to 2 due to docker0 hop
        KeyName: !Ref KeyName
        EnclaveOptions:
          Enabled: true
        UserData:
          Fn::Base64: 
            !Sub |
              MIME-Version: 1.0
              Content-Type: multipart/mixed; boundary="==ENCLAVER=="

              --==ENCLAVER==
              Content-Type: text/x-shellscript; charset="us-ascii"

              #!/bin/bash
              amazon-linux-extras install aws-nitro-enclaves-cli
              yum install aws-nitro-enclaves-cli-devel -y
              usermod -aG ne ec2-user
              usermod -aG docker ec2-user
              sed -i 's/memory_mib: 512/memory_mib: 3072/g' /etc/nitro_enclaves/allocator.yaml
              systemctl start nitro-enclaves-allocator.service && sudo systemctl enable nitro-enclaves-allocator.service
              systemctl start docker && sudo systemctl enable docker

              --==ENCLAVER==--
  DemoNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties: 
      ClusterName: !Ref ClusterName
      AmiType: AL2_x86_64
      NodeRole: !GetAtt DemoIAMRole.Arn
      Subnets:
        - !Ref SubnetId
      LaunchTemplate: 
        Id: !Ref DemoLaunchTemplate
        Version: !GetAtt DemoLaunchTemplate.LatestVersionNumber
      NodegroupName: EnclaveNodes
      ScalingConfig:
        MinSize: 1
        DesiredSize: 2
        MaxSize: 3
      Labels: {"enclaver.io/enclave": "nitro"}
      InstanceTypes:
        - c6a.xlarge
  DemoIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EnclaverEKS
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      Path: /
  AccessS3andKMSPolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow" # Allow access to request the old KMS key, which is protected by the attestation PCR0
            Action:
              - 'kms:Decrypt'
              - 'kms:DescribeKey'
            Resource: "arn:aws:kms:us-east-1:841252696414:key/mrk-b3152356da604a7dac485a0a272957c7"
          - Effect: "Allow" # Allow access to request the KMS key, which is protected by the attestation PCR0
            Action:
              - 'kms:Decrypt'
              - 'kms:DescribeKey'
            Resource: "arn:aws:kms:us-east-1:970625735569:key/mrk-39c14bd4d71f40e390fc158fab0697dd"
          - Effect: "Allow" # Allow access to request the encrypted envelope from old S3 bucket, which is publicly available
            Action:
              - 's3:getObject'
            Resource: "arn:aws:s3:::no-fly-list/no-fly-envelope.txt"
          - Effect: "Allow" # Allow access to request the encrypted envelope from S3 bucket, which is publicly available
            Action:
              - 's3:getObject'
            Resource: "arn:aws:s3:::edgebit-no-fly-list/no-fly-envelope.txt"
      Roles: 
        - Ref: "DemoIAMRole"
